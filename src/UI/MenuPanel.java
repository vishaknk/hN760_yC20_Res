/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import DBConnection.SQLRun;
import Services.MenuService;
import Services.MenuService;
import Utility.ButtonColumn;
import Utility.Utility;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.FoodCategoryModel;
import model.FoodMeatModel;
import model.FoodTimingModel;
import model.FoodTypeModel;
import model.FoodVegType;
import model.MenuListModel;
import model.MenuModel;
import model.MenuModel;
import model.ShopDetailsModel;

/**
 *
 * @author priyesh
 */
public class MenuPanel extends javax.swing.JPanel {

    FoodVegType modelFoodType;
    /**
     * Creates new form ShopeDetails
     */
    public MenuPanel() {
        initComponents();
        menuService = new MenuService();
        initItems();
        getAllMenuItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        menuName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addMenuItem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        shopTable1 = new javax.swing.JTable();
        type = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        vegtype = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        time = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        meat = new javax.swing.JComboBox<>();
        discountBox = new javax.swing.JCheckBox();
        discount = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBorder(javax.swing.BorderFactory.createTitledBorder("Add Menu Details"));
        setPreferredSize(new java.awt.Dimension(1200, 1080));

        menuName.setToolTipText("Food Type Name");

        jLabel2.setText("Menu Item Name*");

        jLabel3.setText("Type*");

        price.setText("0");
        price.setToolTipText("Food Type Name");

        jLabel4.setText("Price*");

        addMenuItem.setBackground(new java.awt.Color(0, 153, 255));
        addMenuItem.setForeground(new java.awt.Color(255, 255, 255));
        addMenuItem.setText("Add Menu");
        addMenuItem.setName("LoginBtn"); // NOI18N
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));

        jLabel1.setText("Menu Details");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        shopTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sl. No.", "Shop Name", "Phone Number", "Email", "Place", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(shopTable1);

        jLabel7.setText("Veg Type*");

        jLabel8.setText("Category*");

        jLabel9.setText("Meat Type*");

        time.setToolTipText("");

        jLabel10.setText("Food Time*");

        discountBox.setText("Discount");

        discount.setToolTipText("Food Type Name");

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sl. No.", "Item Name", "Type", "Category", "Meat", "Veg Type", "Time", "price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(menuTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vegtype, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(meat, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(3479, 3479, 3479))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(discountBox))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(menuName, javax.swing.GroupLayout.PREFERRED_SIZE, 1421, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuName, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(vegtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(meat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(discountBox))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initItems() {
        discount.setVisible(false);
        discountBox.setVisible(false);
        SQLRun sqlObj = new SQLRun();
        String typeSql = "select food_type_id,food_type_name from tbl_food_type";
        ResultSet rs = sqlObj.sqlQuery(typeSql);
        try {
            type.addItem(new FoodTypeModel(0, "Select"));
            while (rs.next()) {
                type.addItem(new FoodTypeModel(rs.getInt("food_type_id"), rs.getString("food_type_name")));
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        String categorySql = "select food_category_id,food_category_name from tbl_food_category";
        ResultSet categoryRs = sqlObj.sqlQuery(categorySql);
        try {
            category.addItem(new FoodCategoryModel(0, "Select"));
            while (categoryRs.next()) {
                category.addItem(new FoodCategoryModel(categoryRs.getInt("food_category_id"), categoryRs.getString("food_category_name")));
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        String meatSql = "select food_meat_id,food_meat_name from tbl_meat_type";
        ResultSet meatSqlRs = sqlObj.sqlQuery(meatSql);
        try {
            meat.addItem(new FoodMeatModel(0, "Select"));
            while (meatSqlRs.next()) {
                meat.addItem(new FoodMeatModel(meatSqlRs.getInt("food_meat_id"), meatSqlRs.getString("food_meat_name")));
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        try {
            vegtype.addItem(new FoodVegType(0,"Select"));
            vegtype.addItem(new FoodVegType(1,"Vegetarian"));
            vegtype.addItem(new FoodVegType(2,"Non-Vegetarian"));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        try {
            time.addItem(new FoodTimingModel(0, "Select"));
            time.addItem(new FoodTimingModel(1, "All Time"));
            time.addItem(new FoodTimingModel(2, "Breakfast"));
            time.addItem(new FoodTimingModel(3, "Lunch"));
            time.addItem(new FoodTimingModel(4, "Dinner"));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        // TODO add your handling code here:
        if (Utility.isNullOrEmpty(menuName.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Menu Name Cannot be Empty.", "ERROR", 0);
            return;
        }
        if (vegtype.getSelectedItem().toString().trim().contains("Select")) {
           JOptionPane.showMessageDialog(null, "Please select Veg or NonVeg", "ERROR", 0);
           return;

        }
        if (time.getSelectedItem().toString().trim().contains("Select")) {
           JOptionPane.showMessageDialog(null, "Please select the available timings", "ERROR", 0);
           return;

        }
        
        if (type.getSelectedItem().toString().trim().contains("Select")) {
           JOptionPane.showMessageDialog(null, "Please select the menu type", "ERROR", 0);
           return;

        }
        if (category.getSelectedItem().toString().trim().contains("Select")) {
           JOptionPane.showMessageDialog(null, "Please select the menu category", "ERROR", 0);
           return;

        }
        
        if (meat.getSelectedItem().toString().trim().contains("Select")) {
           JOptionPane.showMessageDialog(null, "Please select the meat type", "ERROR", 0);
           return;

        }
        
        if (Utility.isNullOrEmpty(price.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Price Cannot be Empty.", "ERROR", 0);
            return;
        }
        
        if (!Utility.validatePhone(price.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please enter valid amount", "ERROR", 0);
            return;
        }
        MenuService menuService = new MenuService();
        MenuModel model = new MenuModel();
        model.setItem_name(menuName.getText().trim());
        model.setFood_type_id(type.getItemAt(type.getSelectedIndex()).getFood_type_id());
        model.setFood_category_id(category.getItemAt(category.getSelectedIndex()).getFood_category_id());
        model.setFood_veg_id(vegtype.getItemAt(vegtype.getSelectedIndex()).getFood_type_id());
        model.setFood_meat_id(meat.getItemAt(meat.getSelectedIndex()).getFood_meat_id());
        model.setFood_time_id(time.getItemAt(time.getSelectedIndex()).getFood_type_id());
        model.setPrice(Integer.parseInt(price.getText().trim()));
        int response;
        if (addMenuItem.getText().contains("Update")) {
            response = menuService.saveOrUpdateMenu(model, false);
        } else {
            response = menuService.saveOrUpdateMenu(model, true);
        }
        clearAll();
        if (response == 1) {
             getAllMenuItems();
            JOptionPane.showMessageDialog(null, "Menu Item " + model.getItem_name() + " has been updated successfully", "Success", 1);
        } else {
            JOptionPane.showMessageDialog(null, "Invalid", "ERROR", 0);
        }
    }//GEN-LAST:event_addMenuItemActionPerformed

    private int menuId;
    private MenuService menuService;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMenuItem;
    private javax.swing.JComboBox<FoodCategoryModel> category;
    private javax.swing.JTextField discount;
    private javax.swing.JCheckBox discountBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<FoodMeatModel> meat;
    private javax.swing.JTextField menuName;
    private javax.swing.JTable menuTable;
    private javax.swing.JTextField price;
    private javax.swing.JTable shopTable1;
    private javax.swing.JComboBox<FoodTimingModel> time;
    private javax.swing.JComboBox<FoodTypeModel> type;
    private javax.swing.JComboBox<FoodVegType> vegtype;
    // End of variables declaration//GEN-END:variables

    private void clearAll() {
        price.setText("0");
        menuName.setText("");
        time.setSelectedIndex(0);
        vegtype.setSelectedIndex(0);
        type.setSelectedIndex(0);
        meat.setSelectedIndex(0);
        category.setSelectedIndex(0);
    }

    private void getAllMenuItems() {
        MenuListModel menuModel = new MenuListModel();
        List<MenuListModel> menuList = menuService.getAllMenuItems();
       
        String data[][] = new String[menuList.size()][9];
        for (int i = 0; i < menuList.size(); i++) {
            data[i][0] = new Integer(i + 1).toString();
            data[i][1] = menuList.get(i).getItem_name();
            data[i][2] = menuList.get(i).getTypeModel().getFood_type_name();
            data[i][3] = menuList.get(i).getCategoryModel().getFood_category_name();
            data[i][4] = menuList.get(i).getFoodMeatModel().getFood_meat_name();
            data[i][5] = menuList.get(i).getFoodVegType().getFood_type_name();
            data[i][6] = menuList.get(i).getTimeModel().getFood_type_name();
            data[i][7] = "Update";
            data[i][8] = "Delete";
        }
        String columnNames[] = new String[]{"Sl.No.", "Item Name", "Type", "Category", "Meat","Veg Type", "Time", "", ""};
        DefaultTableModel tbl = new DefaultTableModel(data, columnNames);
        menuTable.setModel(tbl);

        Action update = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTable table = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                String idValString = (String) ((DefaultTableModel) table.getModel()).getValueAt(modelRow, 0);
                int idVal = Integer.parseInt(idValString);
                editField(menuList.get(idVal - 1));
            }

            private void editField(MenuListModel menuModel) {
                menuId = menuModel.getMenu_id();
                MenuService menuService = new MenuService();
                menuName.setText(menuModel.getItem_name());
                type.setSelectedItem(menuModel.getTypeModel());
                category.setSelectedItem(menuModel.getCategoryModel());
                vegtype.setSelectedItem(modelFoodType);
                time.setSelectedItem(menuModel.getTimeModel());
                meat.setSelectedItem(menuModel.getFoodMeatModel());
                addMenuItem.setText("Update"); 
            }
        };

        Action delete = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTable table = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                String id = (String) ((DefaultTableModel) table.getModel()).getValueAt(modelRow, 0);
                int menuID = menuList.get(Integer.parseInt(id) - 1).getMenu_id();

                int dialogResult = JOptionPane.showConfirmDialog(null, "Confirm Deletion ?", "Warning", JOptionPane.YES_NO_OPTION);
                int status = 0;
                if (dialogResult == JOptionPane.YES_OPTION) {
                    status = menuService.deleteMenuItem(menuID);
                }

                if (status == 1) {
                    getAllMenuItems();
                }

            }
        };

        ButtonColumn buttonColumnEdit = new ButtonColumn(menuTable, update, 7);
        buttonColumnEdit.setMnemonic(KeyEvent.VK_D);
        ButtonColumn buttonColumnDelete = new ButtonColumn(menuTable, delete, 8);
        buttonColumnDelete.setMnemonic(KeyEvent.VK_D);
    }

}
