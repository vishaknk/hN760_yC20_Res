/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Utility.OrderItem;
import Utility.ProductButton;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import model.ItemModel;
import model.OrderItemModel;
import Interface.CategoryListener;
import Interface.CustomerListner;
import Services.MenuService;
import Services.OrderService;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import javax.swing.JOptionPane;

/**
 *
 * @author Visak
 */
public class OrderPanel extends javax.swing.JPanel {

    private ArrayList<ItemModel> foodCategoryType;
    private ArrayList<OrderItemModel> customerList;
    //Product list contains the price, quantity and procduct name
    private ArrayList<OrderItemModel> foodProductList;
    private ArrayList<OrderItemModel> foodOrderedList;
    private ArrayList<Integer> menuIdArray;
    private CategoryItem categoryItem;
    private String tableSelected = "";
    private int tableId, noOfSeats = 0;
    private String customerOrderId = "";

    /**
     * Creates new form OrderPanel
     */
    public OrderPanel() {
        initComponents();
        //Model class to store the item data
        customerOrderId = "";
        foodProductList = new ArrayList<>();
        foodOrderedList = new ArrayList<>();
        customerList = new ArrayList<>();
        menuIdArray = new ArrayList<>();
        setCAtegoryType();
        setCategoryList();
        setProductList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        sp_detail_list = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tableButton = new javax.swing.JButton();
        print = new javax.swing.JButton();
        sp_customer = new javax.swing.JScrollPane();
        save = new javax.swing.JButton();
        sp_category = new javax.swing.JScrollPane();
        sp_product_list = new javax.swing.JScrollPane();

        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 500));
        setLayout(new java.awt.GridLayout(1, 0));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setPreferredSize(new java.awt.Dimension(350, 0));
        jPanel4.setLayout(new java.awt.BorderLayout());

        sp_detail_list.setBackground(new java.awt.Color(255, 0, 255));
        sp_detail_list.setBorder(null);
        sp_detail_list.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jPanel4.add(sp_detail_list, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        add(jPanel4);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setPreferredSize(new java.awt.Dimension(350, 0));

        jPanel1.setBackground(new java.awt.Color(255, 51, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 100));

        tableButton.setText("Tables");
        tableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableButtonActionPerformed(evt);
            }
        });

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        sp_customer.setBackground(new java.awt.Color(255, 102, 102));
        sp_customer.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(print)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp_customer))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sp_customer))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tableButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(print)))
        );

        sp_category.setBackground(new java.awt.Color(255, 102, 102));
        sp_category.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        sp_product_list.setBackground(new java.awt.Color(0, 255, 51));
        sp_product_list.setBorder(null);
        sp_product_list.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sp_product_list.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp_product_list)
            .addComponent(sp_category, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp_category, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp_product_list, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        add(jPanel3);
    }// </editor-fold>//GEN-END:initComponents

    private void tableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableButtonActionPerformed
        // TODO add your handling code here:
        menuIdArray.clear();
        customerOrderId = "";
        categoryItem = new CategoryItem(5);
        if (categoryItem != null) {
            categoryItem.setVisible(true);
        }

        categoryItem.setListener(new CategoryListener() {
            @Override
            public void clickedCategory(int index, ItemModel model) {
                foodOrderedList.clear();
                setOrderList();
//                getAllProductsForTable(model.getId());
                setCustomerList(model.getId());
                tableButton.setText(model.getName());
                tableSelected = model.getName();
                tableId = model.getId();
                noOfSeats = model.getSelected();

            }

            @Override
            public void clickedProducts(int index, OrderItemModel model) {

            }
        });
    }//GEN-LAST:event_tableButtonActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if (tableSelected.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Select Table.", "ERROR", 0);
            return;
        }
        if (foodOrderedList.size() <= 0) {
            JOptionPane.showMessageDialog(null, "Please take at least one order.", "ERROR", 0);
            return;
        }

        OrderService service = new OrderService();
        int orderstatus = 0;
        if (customerOrderId.equals("")) {
            orderstatus = service.saveOrderInMainOrderTable(foodOrderedList, tableId, noOfSeats);
            if (orderstatus == 1) {
                JOptionPane.showMessageDialog(null, " Order Success ", "Success", 1);

                foodProductList = new ArrayList<>();
                foodOrderedList = new ArrayList<>();
                customerList = new ArrayList<>();
                menuIdArray = new ArrayList<>();
                setCAtegoryType();
                setCategoryList();
                setProductList();
                setOrderList();
                setCustomerList(tableId);
                customerOrderId = "";
            } else {
                JOptionPane.showMessageDialog(null, "Order not placed", "ERROR", 0);
            }

        } else {
            service.deleteOrder(customerOrderId);
            orderstatus = service.updateOrderInMainOrderTable(foodOrderedList, tableId,noOfSeats,customerOrderId);
            if (orderstatus == 1) {
                JOptionPane.showMessageDialog(null, " Order Success ", "Success", 1);

                foodProductList = new ArrayList<>();
                foodOrderedList = new ArrayList<>();
                customerList = new ArrayList<>();
                menuIdArray = new ArrayList<>();
                setCAtegoryType();
                setCategoryList();
                setProductList();
                setOrderList();
                setCustomerList(tableId);
                customerOrderId = "";
            } else {
                JOptionPane.showMessageDialog(null, "Order not placed", "ERROR", 0);
            }
        }


    }//GEN-LAST:event_saveActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        // TODO add your handling code here:
        if (customerOrderId.equals("")) {
            JOptionPane.showMessageDialog(null, "Please select customer.", "ERROR", 0);
            return;
        }
        int status = 0;
        OrderService service = new OrderService();
        status = service.printBill(customerOrderId);
        if (status == 1) {
            JOptionPane.showMessageDialog(null, " Print Success ", "Success", 1);
            foodProductList = new ArrayList<>();
            foodOrderedList = new ArrayList<>();
            customerList = new ArrayList<>();
            menuIdArray = new ArrayList<>();
            setCAtegoryType();
            setCategoryList();
            setProductList();
            setOrderList();
            setCustomerList(tableId);
            customerOrderId = "";
        } else {
            JOptionPane.showMessageDialog(null, "Print not initiated", "ERROR", 0);
        }
    }//GEN-LAST:event_printActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton print;
    private javax.swing.JButton save;
    private javax.swing.JScrollPane sp_category;
    private javax.swing.JScrollPane sp_customer;
    private javax.swing.JScrollPane sp_detail_list;
    private javax.swing.JScrollPane sp_product_list;
    private javax.swing.JButton tableButton;
    // End of variables declaration//GEN-END:variables

    private void setCategoryList() {
        JPanel content = new JPanel();
        content.setBackground(Color.WHITE);

        ProductButton buttonData[] = new ProductButton[foodCategoryType.size()];

        for (int index = 0; index < foodCategoryType.size(); index++) {
            buttonData[index] = new ProductButton(foodCategoryType.get(index), index, CategoryListener.CATEGORY);
            buttonData[index].addProductListener(new CategoryListener() {
                @Override
                public void clickedCategory(int index, ItemModel model) {
                    if (tableSelected.equals("")) {
                        JOptionPane.showMessageDialog(null, "Please Select Table.", "ERROR", 0);
                        return;
                    }
                    System.out.println("OrderPanel: " + index);
                    if (categoryItem != null) {
                        categoryItem.setVisible(false);
                    }
                    categoryItem = new CategoryItem(index);
                    if (categoryItem != null) {
                        categoryItem.setVisible(true);
                    }

                    categoryItem.setListener(new CategoryListener() {
                        @Override
                        public void clickedCategory(int index, ItemModel model) {
                            if (tableSelected.equals("")) {
                                JOptionPane.showMessageDialog(null, "Please Select Table.", "ERROR", 0);
                                return;
                            }
                            System.err.println("OrderPanel: " + model.getName());
                            foodCategoryType.get(index).setImage(model.getImage());
                            foodCategoryType.get(index).setName(model.getName());
                            foodCategoryType.get(index).setSelected(model.getSelected());
                            //Setting the category with selected value
                            setCategoryList();
                            //Get all the product from database using the foodCategoryType

                            getQuery();

                        }

                        @Override
                        public void clickedProducts(int index, OrderItemModel model) {

                        }

                        private String getType(int index) {
                            String querybuild = "select menu_id,item_name,food_type_id, food_veg_id, food_type_id, food_category_id,food_meat_id,food_time_id,status,price, image_path from tbl_menu ";
                            String where = " where ";
                            String condition = "";
                            switch (index) {
                                case 0:
                                    condition = " food_veg_id = '" + foodCategoryType.get(index).getSelected() + "'";
                                    break;
                                case 1:
                                    condition = " food_time_id = '" + foodCategoryType.get(index).getSelected() + "'";
                                    break;

                                case 2:
                                    condition = " food_type_id = '" + foodCategoryType.get(index).getSelected() + "'";
                                    break;
                                case 3:
                                    condition = " food_category_id = '" + foodCategoryType.get(index).getSelected() + "'";
                                    break;
                                case 4:
                                    condition = " food_meat_id = '" + foodCategoryType.get(index).getSelected() + "'";
                                    break;
                                default:
                                    condition = "";
                            }
                            querybuild = querybuild + where + condition;
                            return querybuild;

                        }

                        private void getQuery() {
                            String querybuild = "select menu_id,item_name,food_type_id, food_veg_id, food_type_id, food_category_id,food_meat_id,food_time_id,status,price, image_path from tbl_menu ";
                            String where = "";
                            String condition = "";
                            for (int i = 0; i < foodCategoryType.size(); i++) {
                                if (i == 0 && foodCategoryType.get(i).getSelected() >= 0) {
                                    condition = " food_veg_id = '" + foodCategoryType.get(i).getSelected() + "'";
                                    continue;
                                }
                                if (i == 1 && foodCategoryType.get(i).getSelected() >= 0) {
                                    condition = condition.equals("") ? condition + " food_time_id = '" + foodCategoryType.get(i).getSelected() + "'" : condition
                                            + " OR food_time_id = '" + foodCategoryType.get(i).getSelected() + "'";
//                                    condition = " food_time_id = '" + foodCategoryType.get(i).getSelected() + "'";
                                    continue;
                                }
                                if (i == 2 && foodCategoryType.get(i).getSelected() >= 0) {
                                    condition = condition.equals("") ? condition + " food_type_id = '" + foodCategoryType.get(i).getSelected() + "'"
                                            : condition + " OR food_type_id = '" + foodCategoryType.get(i).getSelected() + "'";
//                                    condition = " food_type_id = '" + foodCategoryType.get(i).getSelected() + "'";
                                    continue;
                                }
                                if (i == 3 && foodCategoryType.get(i).getSelected() >= 0) {
                                    condition = condition.equals("") ? condition + " food_category_id = '" + foodCategoryType.get(i).getSelected() + "'"
                                            : condition + " OR food_category_id = '" + foodCategoryType.get(i).getSelected() + "'";
//                                    condition = " food_category_id = '" + foodCategoryType.get(i).getSelected() + "'";
                                    continue;
                                }
                                if (i == 4 && foodCategoryType.get(i).getSelected() >= 0) {
                                    condition = condition.equals("") ? condition + " food_meat_id = '" + foodCategoryType.get(i).getSelected() + "'"
                                            : condition + " OR food_meat_id = '" + foodCategoryType.get(i).getSelected() + "'";
//                                    condition = " food_meat_id = '" + foodCategoryType.get(i).getSelected() + "'";
                                    continue;
                                }
                            }

                            if (!condition.equals("")) {
                                where = " where ";
                                querybuild = querybuild + where + condition;
                            }
                            getAllProducts(querybuild);
                        }
                    });
                }

                @Override
                public void clickedProducts(int index, OrderItemModel model) {
                }
            });

            content.add(buttonData[index]);
        }
        sp_category.getViewport().setView(content);
    }

    private void setCustomerList(int tableId) {
        customerList.clear();
        menuIdArray.clear();
        customerList = new OrderService().getAcitveCustomerByTableId(tableId);
        JPanel content = new JPanel();
        content.setBackground(Color.WHITE);

        ProductButton buttonData[] = new ProductButton[customerList.size()];

        for (int index = 0; index < customerList.size(); index++) {
            buttonData[index] = new ProductButton(customerList.get(index), index, CustomerListner.CUSTOMER);
            buttonData[index].addCustomerListner(new CustomerListner() {
                @Override
                public void onClick(OrderItemModel orderItem) { //To change body of generated methods, choose Tools | Templates.
                    customerOrderId = orderItem.getOrder_id();
                    getAllProductsForTable(orderItem.getOrder_id(), orderItem.getTable_id());
                }
            });
            content.add(buttonData[index]);
        }
        sp_customer.getViewport().setView(content);
    }

    private void setProductList() {
        JPanel contentOrderItem = new JPanel();
        GridLayout gridLayout = new GridLayout(0, 4);
        contentOrderItem.setLayout(new FlowLayout());
        ProductButton buttonOrderItem[] = new ProductButton[foodProductList.size()];

        for (int index = 0; index < foodProductList.size(); index++) {
            buttonOrderItem[index] = new ProductButton(foodProductList.get(index), 0);
            buttonOrderItem[index].addProductListener(new CategoryListener() {
                @Override
                public void clickedCategory(int index, ItemModel model) {

                }

                @Override
                public void clickedProducts(int index, OrderItemModel model) {
                    System.err.println("OrderPanel FoodProduct:" + model.getName());
                    if (tableSelected.equals("")) {
                        JOptionPane.showMessageDialog(null, "Please Select Table.", "ERROR", 0);
                        return;
                    }

                    if (!menuIdArray.contains(model.getMenu_id())) {
                        if (model.getQuantity() == null) {
                            model.setQuantity("0");
                        }
                        model.setQuantity(String.valueOf(Integer.parseInt(model.getQuantity()) + 1));
                        foodOrderedList.add(model);

                    }

                    setOrderList();
                }
            });
            contentOrderItem.add(buttonOrderItem[index]);
        }
        sp_product_list.getViewport().setView(contentOrderItem);
    }

    private void setOrderList() {
        menuIdArray.clear();
        JPanel contentOrder = new JPanel();
        contentOrder.setLayout(new BoxLayout(contentOrder, BoxLayout.Y_AXIS));
        OrderItem orderData[] = new OrderItem[foodOrderedList.size()];
        for (int index = 0; index < foodOrderedList.size(); index++) {
            orderData[index] = new OrderItem(foodOrderedList.get(index));
            if (!menuIdArray.contains(ui)) {
                menuIdArray.add(foodOrderedList.get(index).getMenu_id());
            }
            contentOrder.add(orderData[index]);
        }
        sp_detail_list.getViewport().setView(contentOrder);
    }

    private void getAllProducts(String querybuild) {
        foodProductList.clear();
        MenuService menuService = new MenuService();
        foodProductList = menuService.getMenuOnTable(querybuild);
//        for (int i = 0; i < foodCategoryList.size(); i++) {
//            OrderItemModel model = new OrderItemModel();
//            model.setId(foodCategoryList.get(i).getId());
//            model.setMenu_id(foodCategoryList.get(i).getId());
//            model.setImage(foodCategoryList.get(i).getImage());
//            model.setName(foodCategoryList.get(i).getName());
//            model.setPrice(querybuild);
//            foodProductList.add(model);
//        }
        setProductList();
    }

    private void getAllProductsForTable(String orderID, int tableID) {
        foodOrderedList.clear();
        OrderService orderService = new OrderService();
        foodOrderedList = orderService.getAcitveOrderByOrderId(orderID, tableID);
        setOrderList();

    }

    private void setCAtegoryType() {
        foodCategoryType = new ArrayList<>();
        foodCategoryType.add(new ItemModel(0, "Veg Type"));
        foodCategoryType.add(new ItemModel(1, "Timing"));
        foodCategoryType.add(new ItemModel(2, "Type"));
        foodCategoryType.add(new ItemModel(3, "Category"));
        foodCategoryType.add(new ItemModel(4, "Meat"));

    }

}
